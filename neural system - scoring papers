{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"neural system - scoring papers","provenance":[],"collapsed_sections":["fmv5aB-CyTMU","XkjowrmyuI-O","JZJuPtBDu2If","NJuT1PbOvsJu","H5R3oJjSwO29"],"machine_shape":"hm","mount_file_id":"1_3pT7HtzQ3aVQqNeXJWqpljJPD6veqpE","authorship_tag":"ABX9TyMjqfXdffVq0b/fQ6h/8arN"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"ODdNDSONyNIY","colab_type":"text"},"source":["# Perpare the documents to score\n"]},{"cell_type":"markdown","metadata":{"id":"fmv5aB-CyTMU","colab_type":"text"},"source":["## Get the data"]},{"cell_type":"code","metadata":{"id":"xgLBwTmOZE4B","colab_type":"code","outputId":"4705a17b-3845-4854-b85c-739f02d8f583","executionInfo":{"status":"ok","timestamp":1590140619886,"user_tz":-120,"elapsed":83298,"user":{"displayName":"Simone Barbaro","photoUrl":"","userId":"14002336215983557633"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wy1wWdh2t2G3","colab_type":"text"},"source":["My data was on drive as results.csv, discussions.csv, pairs.csv."]},{"cell_type":"code","metadata":{"id":"rOtqvBkJoEvW","colab_type":"code","colab":{}},"source":["!cp /content/drive/My\\ Drive/Colab\\ Notebooks/data/*.csv ."],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XCBqzXfk8_7H","colab_type":"code","colab":{}},"source":["import numpy as np\n","import pandas as pd\n","import pprint\n","pp = pprint.PrettyPrinter()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"A6717OG8-p_I","colab_type":"code","colab":{}},"source":["results = pd.read_csv(\"results.csv\")\n","discussions = pd.read_csv(\"discussions.csv\")\n","pairs = pd.read_csv(\"pairs.csv\")"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XkjowrmyuI-O","colab_type":"text"},"source":["## Manually divide the 2 groups of 10 papers"]},{"cell_type":"markdown","metadata":{"id":"o0_iU2r9uTgi","colab_type":"text"},"source":["Change this cell to the 10 papers ids you have in one of the groups."]},{"cell_type":"code","metadata":{"id":"Kg1CLO4IdmIb","colab_type":"code","colab":{}},"source":["tmp = [\"432129\", \"1150\", \"1691937\", \"432234\", \"434379\", \"429330\", \"432103\", \"432326\", \"1128341\", \"433520\"]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aOZTdQdfulhD","colab_type":"text"},"source":["doc_id should be the name of the field in all the dataframes"]},{"cell_type":"code","metadata":{"id":"xVymTcBjdZYb","colab_type":"code","colab":{}},"source":["counts = pd.DataFrame(pairs[\"doc_id\"].value_counts())"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JxvqGKI9eNs5","colab_type":"code","colab":{}},"source":["temp = {}\n","for key in counts.index:\n","  if str(key) in tmp:\n","    temp[key] = 1\n","  else:\n","    temp[key] = 0"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JZJuPtBDu2If","colab_type":"text"},"source":["## Choose 5 papers to score\n","I choose 5 papers by seeing what group of 5 has the least pairs among the papers. This is actually not the set of papers with the least amount of pairs to score but is a close approximation.\n","This code should automatically adapt to your papers if you change the groups in the section before."]},{"cell_type":"code","metadata":{"id":"fIkB6gHSfGe8","colab_type":"code","colab":{}},"source":["counts[\"set\"] = pd.Series(temp)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"F2YGfmqefqvU","colab_type":"code","colab":{}},"source":["counts_1 = counts[counts[\"set\"] == 1][\"doc_id\"]\n","counts_0 = counts[counts[\"set\"] == 0][\"doc_id\"]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6JJzrqFFc2rt","colab_type":"code","outputId":"c8034ad1-8b98-4aca-b110-471848b778cf","executionInfo":{"status":"ok","timestamp":1590140624419,"user_tz":-120,"elapsed":87769,"user":{"displayName":"Simone Barbaro","photoUrl":"","userId":"14002336215983557633"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["counts_1.tail(5).sum()"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["30"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"0vGVBOq6aOsa","colab_type":"code","outputId":"46423fcc-5af5-48b6-96c6-ab7b8856edac","executionInfo":{"status":"ok","timestamp":1590140624420,"user_tz":-120,"elapsed":87750,"user":{"displayName":"Simone Barbaro","photoUrl":"","userId":"14002336215983557633"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["counts_0.tail(5).sum()"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["30"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"ilKYy7u7gDZX","colab_type":"code","outputId":"9ffd9f9b-50d3-4b10-db06-71a1d3e7f79b","executionInfo":{"status":"ok","timestamp":1590140624421,"user_tz":-120,"elapsed":87733,"user":{"displayName":"Simone Barbaro","photoUrl":"","userId":"14002336215983557633"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["easy_pairs = counts_0.tail(5).index\n","easy_pairs = easy_pairs.to_list()\n","easy_pairs"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[193334, 1421389, 653044, 2442696, 1982497]"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"sisYUs2LgLIW","colab_type":"code","colab":{}},"source":["easy_results = results[results[\"doc_id\"].isin(easy_pairs)]\n","easy_discussions = discussions[discussions[\"doc_id\"].isin(easy_pairs)]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7XA00TJ9lgse","colab_type":"code","outputId":"8dff8e18-3234-4ec3-b7ae-92e024804855","executionInfo":{"status":"ok","timestamp":1590140624920,"user_tz":-120,"elapsed":88212,"user":{"displayName":"Simone Barbaro","photoUrl":"","userId":"14002336215983557633"}},"colab":{"base_uri":"https://localhost:8080/","height":221}},"source":["easy_results[\"key\"] = 1\n","easy_discussions[\"key\"] = 1"],"execution_count":15,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"Entry point for launching an IPython kernel.\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"u1tmHneOvn7B","colab_type":"text"},"source":["# Score papers"]},{"cell_type":"code","metadata":{"id":"ODE7doUnne23","colab_type":"code","colab":{}},"source":["pairs_to_score = pd.merge(easy_results, easy_discussions, on=\"key\")[['doc_id_x', 'result_id', 'doc_id_y', 'discussion_id']]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"75jYxRlDnuhU","colab_type":"code","colab":{}},"source":["pairs_to_score.to_csv(\"pairs_to_score.csv\", header=True, index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NJuT1PbOvsJu","colab_type":"text"},"source":["## BM25\n","I used their custom bm25 to help create the iterator. This is not necessary but I found that most of the time the highest scoring pairs that I choose were the first the model suggested for each paper.\n","\n","None of the code in this section is important to do the scoring so you can skip it."]},{"cell_type":"code","metadata":{"id":"gcsVsjdqocIW","colab_type":"code","outputId":"eab3401e-0499-456d-db9d-5370be9e0998","executionInfo":{"status":"ok","timestamp":1590140626099,"user_tz":-120,"elapsed":89366,"user":{"displayName":"Simone Barbaro","photoUrl":"","userId":"14002336215983557633"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["import nltk\n","from nltk.tokenize import  RegexpTokenizer\n","# from sentence_splitter import split_text_into_sentences\n","from nltk.stem.snowball import SnowballStemmer\n","from functools import lru_cache\n","from nltk.corpus import stopwords\n","nltk.download('stopwords')\n","\n","from array import array\n","import numpy as np\n","\n","import zipfile\n","import pickle\n","\n","class SentenceTokenizer:\n","    def __init__(self ):\n","        self.tokenizer = RegexpTokenizer(r'\\w+')\n","        self.stemmer = SnowballStemmer(\"english\")\n","        self.general_stopwords = set(stopwords.words('english'))\n","\n","    @lru_cache(100000)\n","    def stem( self, w ):\n","        return self.stemmer.stem(w)\n","    \n","    def tokenize(self, sen, remove_stopwords = False ):\n","        if remove_stopwords:\n","            sen = \" \".join( [ w for w in sen.split() if w.lower() not in self.general_stopwords  ] )\n","        wlist = self.tokenizer.tokenize( sen )\n","        sen = \" \".join( [ self.stem(w.lower()) for w in wlist ] )\n","        return sen"],"execution_count":18,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"j64__UWGvihr","colab_type":"code","colab":{}},"source":["def add_unigram( inv_idx, index, doc_unigrams ):\n","    unique_unigrams = {}\n","    for unigram in doc_unigrams:\n","        unique_unigrams[unigram] = unique_unigrams.get( unigram, 0 ) + 1\n","            \n","    for unigram in unique_unigrams:\n","        if unigram not in inv_idx:\n","            inv_idx[ unigram ] = { \"doc_indices\": array( \"I\", [index] ), \"term_frequencies\": array( \"I\", [ unique_unigrams[unigram] ] )   }\n","        else:\n","            inv_idx[ unigram ][ \"doc_indices\" ].append( index )\n","            inv_idx[ unigram ][ \"term_frequencies\" ].append( unique_unigrams[unigram] )"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qXKHcgGTwBGJ","colab_type":"code","outputId":"66062e18-61b9-4404-dcf6-4df7976bbefd","executionInfo":{"status":"ok","timestamp":1590140626104,"user_tz":-120,"elapsed":89351,"user":{"displayName":"Simone Barbaro","photoUrl":"","userId":"14002336215983557633"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["index = 0\n","inv_idx = {}\n","\n","index_to_id_mapper = {}\n","id_to_index_mapper = {}\n","index_to_doc_length_mapper = {}\n","sent_tok = SentenceTokenizer()\n","\n","## direct read the pubmed zip file\n","\n","for doc_id, row in easy_discussions.iterrows():\n","    #doc_id = line_split[0]\n","    index_to_id_mapper[index] = doc_id\n","    id_to_index_mapper[doc_id] = index\n","\n","    fulltext = sent_tok.tokenize(row[\"text\"].strip())\n","    fulltext_words =  fulltext.split()\n","    add_unigram( inv_idx, index, fulltext_words )\n","    index_to_doc_length_mapper[index] = len(fulltext_words)\n","\n","\n","    index +=1\n","    if index % 1000 == 0:\n","        print(\"index: %d\"%(index))\n","\n","for unigram in inv_idx:\n","    inv_idx[unigram][\"doc_indices\"] = np.array( inv_idx[unigram][\"doc_indices\"]  )\n","    inv_idx[unigram][\"term_frequencies\"] = np.array( inv_idx[unigram][\"term_frequencies\"] )\n","\n","save_path = \"pubmed_inverted_index.pkl\"\n","with open(save_path, \"wb\" ) as f:\n","    pickle.dump( { \"id_to_index_mapper\": id_to_index_mapper,\n","                   \"index_to_doc_length_mapper\": index_to_doc_length_mapper,\n","                   \"num_of_docs\": index, \n","                   \"index_to_id_mapper\": index_to_id_mapper, \n","                   \"inv_idx\": inv_idx }, f, -1 )\n","print(\"Computation finished!\")"],"execution_count":20,"outputs":[{"output_type":"stream","text":["Computation finished!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0Zrw_do6sQ5p","colab_type":"code","colab":{}},"source":["class BM25Ranker:\n","    def __init__(self, inv_idx_data):\n","        self.tokenizer = SentenceTokenizer()\n","        self.inv_idx = inv_idx_data[\"inv_idx\"]\n","        self.index_to_id_mapper = inv_idx_data[\"index_to_id_mapper\"]\n","        self.index_to_doc_length_mapper = inv_idx_data[\"index_to_doc_length_mapper\"]\n","        self.num_of_docs = inv_idx_data[\"num_of_docs\"]\n","        idx_list = list(self.index_to_doc_length_mapper.keys())\n","        assert np.min(idx_list) == 0 and np.max(idx_list) == len(idx_list) -1\n","        self.doc_lengths = np.array([ self.index_to_doc_length_mapper[idx] for idx in range( len(idx_list) ) ])\n","        self.avg_doc_length = np.mean( self.doc_lengths )\n","        \n","    def get_scores( self, query, k = 1.2, b = 0.75, require_tokenize = True , remove_stopwords = False, ):\n","        if require_tokenize:\n","            w_list = self.tokenizer.tokenize(query, remove_stopwords = remove_stopwords).split()\n","        else:\n","            w_list = query.split()\n","        unique_words = {}\n","        for w in w_list:\n","            unique_words[w] = unique_words.get(w, 0) + 1\n","        scores = np.zeros( self.num_of_docs, dtype = np.float32 )\n","        for w in unique_words:\n","            if w not in self.inv_idx:\n","                continue\n","            Nw = len( self.inv_idx[w][\"doc_indices\"] )\n","            doc_length_w = self.doc_lengths[ self.inv_idx[w][\"doc_indices\"] ]\n","            scores[ self.inv_idx[w][\"doc_indices\"] ] = scores[ self.inv_idx[w][\"doc_indices\"] ] +  unique_words[w] * self.inv_idx[w][\"term_frequencies\"] *(1+k)/( self.inv_idx[w][\"term_frequencies\"]  + k*( 1- b + b* doc_length_w/ self.avg_doc_length )) * np.log(1+ (self.num_of_docs - Nw+0.5 )/(Nw+0.5) )    \n","        return scores\n","\n","    def get_top_n(self, query, n, k = 1.2, b = 0.75, require_tokenize = True ,remove_stopwords = False):\n","        scores = self.get_scores( query, k, b, require_tokenize , remove_stopwords )\n","        top_n_indices = np.argsort( -scores )[:n]\n","        return [ self.index_to_id_mapper[idx] for idx in top_n_indices ]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wxgzqbumxmI8","colab_type":"code","colab":{}},"source":["with open(save_path, \"rb\") as f:\n","    inv_idx_info = pickle.load(f)\n","\n","bm25_ranker = BM25Ranker(inv_idx_info)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"H5R3oJjSwO29","colab_type":"text"},"source":["## Generator\n","This is the most importat part, this class generate pairs to score.\n","You don't need to change it to use it, if the code above works this will work as well.\n","See usage in the final section."]},{"cell_type":"code","metadata":{"id":"02v8Yc0p64J_","colab_type":"code","colab":{}},"source":["class Yielder:\n","  def __init__(self):\n","    self.generator = self.yield_to_score()\n","    self.verbose = True\n","\n","  def yield_to_score(self):\n","      i = 0\n","      for doc_id, row in easy_results.iterrows():\n","        disc_to_score = easy_discussions.loc[bm25_ranker.get_top_n(row[\"text\"], len(easy_discussions) )]\n","        self.left = len(disc_to_score)\n","        self.j = 0\n","        for doc_id_d, row_d in disc_to_score.iterrows():\n","            if self.verbose:\n","                print(\"{},{},{},{}\".format(row[\"doc_id\"],row[\"result_id\"],row_d[\"doc_id\"],row_d[\"discussion_id\"]))\n","                pp.pprint(row[\"text\"])\n","                pp.pprint(row_d[\"text\"])\n","            else:\n","                print(\"{},{},{},{},0\".format(row[\"doc_id\"],row[\"result_id\"],row_d[\"doc_id\"],row_d[\"discussion_id\"]))\n","            self.j += 1\n","            yield i\n","            i += 1\n","\n","  def get_next(self):\n","      next(self.generator)\n","      #return self.generator.send(None)\n","  \n","  def finish(self):\n","      print(self.left)\n","      self.verbose = False\n","      while self.j < self.left:\n","          self.get_next()\n","      self.verbose = True"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wq5XMGpYwg-C","colab_type":"text"},"source":["## See and score\n","Here you just have to read the pairs proposed by the generator and score them appropriately.\n","Run the cell with get_next until it gives an error to see all the pairs and you need only to add the score."]},{"cell_type":"code","metadata":{"id":"_W4uQbE3ygXz","colab_type":"code","colab":{}},"source":["gen = Yielder()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AFBXYt72xwPh","colab_type":"text"},"source":["Here you can read the pair to score. The first line is a csv line representing: \"result_doc_id, result_id, discussion_doc_id, discussion_id\". Then there is a formatted print of the result followed by a formatted print of the discussion."]},{"cell_type":"code","metadata":{"id":"NwA6G_EX0YHj","colab_type":"code","outputId":"723cccc5-eae0-4415-e252-d0d6b6d0ca22","executionInfo":{"status":"ok","timestamp":1590140626110,"user_tz":-120,"elapsed":89333,"user":{"displayName":"Simone Barbaro","photoUrl":"","userId":"14002336215983557633"}},"colab":{"base_uri":"https://localhost:8080/","height":833}},"source":["gen.get_next()"],"execution_count":25,"outputs":[{"output_type":"stream","text":["1421389,0,1421389,0\n","('A 49-year-old Caucasian woman with a history of migraines and herpes '\n"," 'labialis presented to the emergency department (ED) with headache, and '\n"," 'numbness and tingling in the left side of her face and her left leg. She '\n"," 'related a history of recurrent sinusitis related to seasonal allergies, but '\n"," 'with no recent nasal or pulmonary symptoms. She had developed peri-oral '\n"," 'fever blisters, a low-grade fever, and a disabling left temporal headache '\n"," 'four weeks earlier. Her headache was unlike the typical migraines that she '\n"," 'periodically experienced, which usually responded to a combination of '\n"," 'acetaminophen, aspirin, and caffeine. In addition, she experienced nausea, '\n"," 'vomiting, and decreased appetite in association with her headaches that were '\n"," 'accompanied by a 7.7 kg weight loss. She also exhibited personality changes '\n"," 'and short-term memory loss. Her blisters healed in two weeks, but her '\n"," 'headache and fatigue persisted. She subsequently developed numbness and '\n"," 'subjective weakness in the left side of her face and her left leg one week '\n"," 'prior to presentation. She sought care from her primary care provider, who '\n"," \"diagnosed her with Bell's palsy and prescribed metoclopramide for her \"\n"," 'nausea. She was also referred to a neurologist who began treatment with '\n"," 'aspirin for suspected transient ischemic attack. An MRI of the brain was '\n"," 'pending at the time of her presentation to the ED. ')\n","(' HSV-1 encephalitis usually presents fulminantly in immunocompetent '\n"," 'individuals with fever, altered mental status, seizures, CSF and EEG '\n"," \"findings, and temporal lobe lesions on MRI. Our patient's illness began with \"\n"," 'recurrent herpes simplex labialis, which spread to the left trigeminal nerve '\n"," 'and left L5 nerve root over the course of four weeks. Besides her '\n"," 'dysesthesias, her symptoms included headache, low-grade fever, weight loss, '\n"," 'mild personality change and short-term memory loss, which were no longer '\n"," 'exhibited on presentation. Her CSF contained mildly elevated levels of '\n"," 'lymphocytes (WBC: 6 cells/μL), erythrocytes (RBC: 63 cells/μL), and protein '\n"," '(49 mg/dL); owing to the fact that cell counts were taken from the fourth '\n"," 'tube collected, the probability of a traumatic lumbar puncture is low. '\n"," 'Beyond her MRI findings of peri-ventriculitis and basal meningitis '\n"," 'particularly over the brainstem, our patient had no temporal lobe '\n"," 'abnormalities, although approximately 10% of patients with PCR-proven HSV '\n"," 'encephalitis do not demonstrate temporal lobe involvement. In addition, '\n"," 'other cases of brainstem encephalitis due to HSV have been reported with '\n"," 'viral reactivation possibly occurring in the trigeminal nerve (relevant '\n"," 'references are available upon request from the corresponding author). '\n"," 'Regarding involvement of white matter, other cases of extratemporal HSV '\n"," 'encephalitis have also shown this pattern on neuroimaging, particularly '\n"," 'during chronic or subacute phases of illness; often being associated with '\n"," 'clinical relapse and viral persistence; and sometimes showing demyelination '\n"," 'in addition to edema, inflammatory change, and viral inclusions on a '\n"," 'microscopic level (relevant references are available upon request from the '\n"," \"corresponding author). Overall, our patient's clinical presentation, \"\n"," 'borderline pleocytosis in the CSF, and extratemporal findings on MRI were '\n"," 'consistent with a more subacute course of HSV-1 encephalitis proven by PCR, '\n"," 'presumably due to immunosuppression from CLL. ')\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"zbkcFm8Sw-aG","colab_type":"text"},"source":["Skip all the pairs associated to a result and go to the next. I used this mainly because I did not finish all in a day so the next day I could skip faster all the papers I did already.\n","This cell also print the pairs with a score of 0, this can be used if you already know that you will score all the last papers with 0 (after reading pairs for a while, I already knew before that only a couple would be relevant, so when I saw all those I skipped the rest)."]},{"cell_type":"code","metadata":{"id":"xJDZNSZ49n8C","colab_type":"code","outputId":"98cf60c0-2333-4e14-b546-285adc951ee4","executionInfo":{"status":"ok","timestamp":1590140626110,"user_tz":-120,"elapsed":89295,"user":{"displayName":"Simone Barbaro","photoUrl":"","userId":"14002336215983557633"}},"colab":{"base_uri":"https://localhost:8080/","height":357}},"source":["gen.finish()"],"execution_count":26,"outputs":[{"output_type":"stream","text":["20\n","1421389,0,1421389,3,0\n","1421389,0,1421389,4,0\n","1421389,0,1421389,1,0\n","1421389,0,653044,1,0\n","1421389,0,2442696,0,0\n","1421389,0,653044,2,0\n","1421389,0,193334,3,0\n","1421389,0,193334,2,0\n","1421389,0,1421389,2,0\n","1421389,0,653044,4,0\n","1421389,0,193334,5,0\n","1421389,0,1982497,0,0\n","1421389,0,653044,0,0\n","1421389,0,193334,4,0\n","1421389,0,653044,3,0\n","1421389,0,1982497,1,0\n","1421389,0,2442696,1,0\n","1421389,0,193334,0,0\n","1421389,0,193334,1,0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wTxIoQUj95xB","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}